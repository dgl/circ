// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  describe('A chat log', function() {
    var chatLog, context1, context2;
    chatLog = void 0;
    context1 = new Context("freenode", "#bash");
    context2 = new Context("freenode", "#awesome");
    beforeEach(function() {
      return chatLog = new chat.ChatLog;
    });
    it("can log chat messages", function() {
      var log, log2;
      chatLog.whitelist('privmsg');
      chatLog.add(context1, 'privmsg update self', 'some content');
      chatLog.add(context1, 'privmsg update', 'some more content');
      chatLog.add(context1, 'privmsg', 'even more content');
      log = chatLog.get(context1);
      expect(log).toBe('some content some more content even more content');
      log2 = chatLog.get(context2);
      return expect(log2).not.toBeDefined();
    });
    it("only keeps messages with a whitelisted type", function() {
      chatLog.whitelist('privmsg');
      chatLog.add(context1, 'notice', 'some content');
      expect(chatLog.get(context1)).not.toBeDefined();
      chatLog.add(context1, 'privmsg', 'some content');
      return expect(chatLog.get(context1)).toBeDefined();
    });
    it("can list all contexts where logged messages came from", function() {
      var context, i, _i;
      chatLog.whitelist('privmsg');
      for (i = _i = 0; _i <= 99; i = ++_i) {
        context = new Context("freenode" + (i % 10), "#channel" + i);
        chatLog.add(context, 'privmsg', "I like the number " + i);
      }
      expect(chatLog.getContextList().length).toBe(100);
      return expect(chatLog.getContextList()[8]).toEqual(new Context('freenode8', '#channel8'));
    });
    it("can load data from another chat log", function() {
      var data, serializedData;
      chatLog.whitelist('privmsg');
      chatLog.add(context1, 'privmsg', 'some data');
      chatLog.add(context2, 'privmsg', 'some more data');
      data = chatLog.getData();
      serializedData = JSON.stringify(data);
      data = JSON.parse(serializedData);
      chatLog = new chat.ChatLog;
      chatLog.loadData(data);
      expect(chatLog.get(context1)).toBe('some data');
      return expect(chatLog.get(context2)).toBe('some more data');
    });
    return it("has a limit of messages entries per window", function() {
      var entries, i, _i;
      chatLog.whitelist('privmsg');
      for (i = _i = 0; _i <= 999; i = ++_i) {
        chatLog.add(context1, 'privmsg', i);
      }
      expect(chatLog.get(context1).split(' ').length).toBe(1000);
      chatLog.add(context1, 'privmsg', 'newest_data');
      expect(chatLog.get(context1).split(' ').length <= 1000).toBe(true);
      entries = chatLog.get(context1).split(' ');
      return expect(entries[entries.length - 1]).toBe('newest_data');
    });
  });

}).call(this);
