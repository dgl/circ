// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  xdescribe('A script command handler', function() {
    var handle, onCommand, sc;
    sc = onCommand = void 0;
    handle = function(argObj) {
      return sc.handle(argObj.type, argObj);
    };
    beforeEach(function() {
      onCommand = jasmine.createSpy('onCommand');
      sc = new window.script.ScriptCommandHandler();
      return sc.setCallback(onCommand);
    });
    it("handles the 'register_command' command", function() {
      expect(sc.canHandle('register_command')).toBe(true);
      handle({
        type: 'register_command',
        command: 'kick'
      });
      return expect(onCommand).toHaveBeenCalledWith('register_command', 'kick');
    });
    it("handles the 'input' command", function() {
      expect(sc.canHandle('input')).toBe(true);
      handle({
        type: 'input',
        channel: '#bash',
        server: 'freenode.net',
        input: '/join #bash2'
      });
      return expect(onCommand).toHaveBeenCalledWith('input', '#bash', 'freenode.net', '/join #bash2');
    });
    return it("handles the 'notify' command", function() {
      expect(sc.canHandle('notify')).toBe(true);
      handle({
        type: 'notify',
        title: 'hi!',
        body: 'body text',
        id: 1234,
        timeout: 500
      });
      return expect(onCommand).toHaveBeenCalledWith('notify', 'hi!', 'body text', 1234, 500);
    });
  });

}).call(this);
