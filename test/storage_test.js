// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  describe('IRC sync storage', function() {
    var chat, local, ss, sync;
    ss = chat = sync = local = void 0;
    beforeEach(function() {
      mocks.storage.useMock();
      sync = chrome.storage.sync;
      local = chrome.storage.local;
      chat = jasmine.createSpyObj('chat', ['connect', 'join', 'updateStatus', 'setNick', 'setPassword']);
      chat.remoteConnectionHandler = jasmine.createSpyObj('remoteConnectionHandler', ['determineConnection']);
      chat.remoteConnection = {
        isSupported: function() {
          return true;
        }
      };
      chat.remoteConnection.connectToServer = jasmine.createSpy('connectToServer');
      chat.connections = {
        freenode: 'f',
        dalnet: 'd'
      };
      chat.startWalkthrough = jasmine.createSpy('startWalkthrough');
      ss = new window.chat.Storage(chat);
      return ss.resume();
    });
    it('does nothing when there is no state to restore', function() {
      ss.init();
      expect(chat.connect).not.toHaveBeenCalled();
      expect(chat.join).not.toHaveBeenCalled();
      expect(chat.updateStatus).not.toHaveBeenCalled();
      return expect(chat.setNick).not.toHaveBeenCalled();
    });
    it('does nothing when there syncing has been paused', function() {
      ss.pause();
      ss.nickChanged('bob');
      ss.serverJoined('freenode');
      ss.channelJoined('freenode', '#bash');
      ss.restoreSavedState();
      expect(chat.connect).not.toHaveBeenCalled();
      expect(chat.join).not.toHaveBeenCalled();
      expect(chat.updateStatus).not.toHaveBeenCalled();
      return expect(chat.setNick).not.toHaveBeenCalled();
    });
    it('sets a new password if one is not found', function() {
      ss.init();
      return expect(ss.password).toEqual(jasmine.any(String));
    });
    it('restores the password if it was cleared', function() {
      var password;
      ss.init();
      password = ss.password;
      chrome.storage.update({
        password: {
          newValue: void 0
        }
      }, 'sync');
      return expect(sync._storageMap.password).toBe(password);
    });
    it('restores the stored nick', function() {
      sync.set({
        nick: 'ournick'
      });
      ss.restoreSavedState();
      return expect(chat.setNick).toHaveBeenCalledWith('ournick');
    });
    it('restores the stored password', function() {
      sync.set({
        password: 'somepw'
      });
      ss.init();
      return expect(chat.setPassword).toHaveBeenCalledWith('somepw');
    });
    it('restores the stored servers', function() {
      sync.set({
        servers: [
          {
            name: 'freenode',
            port: 6667
          }, {
            name: 'dalnet',
            port: 6697
          }, {
            name: 'oftc',
            port: 6667,
            password: 'password'
          }
        ]
      });
      ss.restoreSavedState();
      expect(chat.connect).toHaveBeenCalledWith('freenode', 6667, void 0);
      expect(chat.connect).toHaveBeenCalledWith('dalnet', 6697, void 0);
      return expect(chat.connect).toHaveBeenCalledWith('oftc', 6667, 'password');
    });
    it('restores the stored channels', function() {
      sync.set({
        channels: [
          {
            name: '#bash',
            server: 'freenode'
          }, {
            name: '#awesome',
            server: 'freenode'
          }, {
            name: '#hiphop',
            server: 'dalnet',
            key: 'password'
          }
        ]
      });
      ss.restoreSavedState();
      expect(chat.join).toHaveBeenCalledWith('f', '#bash', void 0);
      expect(chat.join).toHaveBeenCalledWith('f', '#awesome', void 0);
      return expect(chat.join).toHaveBeenCalledWith('d', '#hiphop', 'password');
    });
    it('stores the new nick on nickChanged()', function() {
      ss.nickChanged('newnick');
      return expect(sync._storageMap.nick).toBe('newnick');
    });
    it('stores the joined channel on channelJoined()', function() {
      ss.channelJoined('freenode', '#bash');
      return expect(sync._storageMap.channels).toEqual([
        {
          name: '#bash',
          server: 'freenode'
        }
      ]);
    });
    it('removes the stored channel on channelParted()', function() {
      ss.channelJoined('freenode', '#bash');
      ss.parted('freenode', '#bash');
      return expect(sync._storageMap.channels).toEqual([]);
    });
    it('removes the stored lowercase username on channelParted()', function() {
      ss.channelJoined('freenode', 'sally');
      ss.parted('freenode', 'Sally');
      return expect(sync._storageMap.channels).toEqual([]);
    });
    it('stores the joined server on serverJoined()', function() {
      ss.serverJoined('freenode', 6667);
      return expect(sync._storageMap.servers).toEqual([
        {
          name: 'freenode',
          port: 6667
        }
      ]);
    });
    it('stores the joined server password on serverJoined()', function() {
      ss.serverJoined('freenode', 6667, 'test1234');
      return expect(sync._storageMap.servers).toEqual([
        {
          name: 'freenode',
          port: 6667,
          password: 'test1234'
        }
      ]);
    });
    it('removes the stored server on serverParted()', function() {
      ss.serverJoined('freenode', 6697);
      ss.parted('freenode', 6697);
      return expect(sync._storageMap.channels).toEqual([]);
    });
    it('loads the stored server device', function() {
      var connectInfo;
      connectInfo = {
        addr: '1.1.1.1',
        port: 1
      };
      sync.set({
        server_device: connectInfo
      });
      ss.init();
      return expect(ss.serverDevice).toEqual(connectInfo);
    });
    it('can store a new server device', function() {
      var connectInfo;
      connectInfo = {
        addr: '1.1.1.1',
        port: 1
      };
      ss.becomeServerDevice(connectInfo);
      return expect(sync._storageMap.server_device).toEqual(connectInfo);
    });
    it('connects to the server automatically when a new server is set', function() {
      var connectInfo;
      connectInfo = {
        addr: '1.1.1.2',
        port: 1
      };
      sync.set({
        server_device: {
          addr: '1.1.1.1',
          port: 1
        }
      });
      ss.init();
      chrome.storage.update({
        server_device: {
          newValue: connectInfo
        }
      }, 'sync');
      return expect(chat.remoteConnectionHandler.determineConnection).toHaveBeenCalledWith(connectInfo);
    });
    it('sets autostart with setAutostart', function() {
      var result;
      result = ss.setAutostart(true);
      expect(result).toBe(true);
      expect(sync._storageMap['autostart']).toBe(true);
      result = ss.setAutostart(false);
      expect(result).toBe(false);
      return expect(sync._storageMap['autostart']).toBe(false);
    });
    return it('toggles autostart when no args are given', function() {
      var result;
      ss.setAutostart(true);
      result = ss.setAutostart();
      expect(result).toBe(false);
      result = ss.setAutostart();
      return expect(result).toBe(true);
    });
  });

}).call(this);
