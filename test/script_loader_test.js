// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  describe('A script loader', function() {
    var frame, numFrames, onMessage, sl, waitsForCommandToBeHooked, waitsForScriptToLoad;
    sl = frame = void 0;
    numFrames = void 0;
    onMessage = jasmine.createSpy('onMessage');
    addEventListener('message', onMessage);
    waitsForScriptToLoad = function() {
      return waitsFor((function() {
        return onMessage.calls.length > 1;
      }), 'onMessage should have been called', 500);
    };
    waitsForCommandToBeHooked = function() {
      return waitsFor(function() {
        if (onMessage.calls.length === 0) {
          return false;
        }
        return onMessage.mostRecentCall.args[0].data.type === 'hook_command';
      }, 'a command should have been hooked', 500);
    };
    beforeEach(function() {
      onMessage.reset();
      numFrames = $('iframe').length;
      return sl = window.script.loader;
    });
    afterEach(function() {
      return $('iframe').remove();
    });
    it('creates an invisible iframe on createScript()', function() {
      var script;
      script = sl._createScript(mocks.scripts.simpleSourceCode);
      expect($('iframe').length).toEqual(numFrames + 1);
      return expect($('iframe')[0].style.display).toBe('none');
    });
    it('calls eval() on the script source code', function() {
      var script;
      script = sl._createScript(mocks.scripts.simpleSourceCode);
      waitsForScriptToLoad();
      return runs(function() {
        var data;
        data = onMessage.mostRecentCall.args[0].data;
        expect(data.msg).toEqual('hi!');
        return expect(data.script).toBeUndefined();
      });
    });
    it('provides convenience functions for scripts', function() {
      var script;
      script = sl._createScript(mocks.scripts.hiSourceCode);
      waitsForCommandToBeHooked();
      return runs(function() {
        var hookCommandEvent, nameEvent;
        hookCommandEvent = onMessage.mostRecentCall.args[0].data;
        expect(hookCommandEvent.name).toBe('hi');
        nameEvent = onMessage.calls[1].args[0].data;
        expect(nameEvent.type).toBe('meta');
        expect(nameEvent.name).toBe('name');
        return expect(nameEvent.args[0]).toBe('/hi');
      });
    });
    it('has the script run in a sandbox', function() {
      var script;
      script = sl._createScript(mocks.scripts.maliciousSourceCode);
      waitsForScriptToLoad();
      return runs(function() {
        var data;
        data = onMessage.mostRecentCall.args[0].data;
        return expect(data.chromeAPI).toBeUndefined();
      });
    });
    return it('can auto-load prepackaged scripts', function() {
      var calls;
      calls = 0;
      sl.loadPrepackagedScripts(function() {
        return calls++;
      });
      return expect($('iframe').length).toEqual(numFrames + calls);
    });
  });

}).call(this);
