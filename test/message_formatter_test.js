// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  describe("A message formatter", function() {
    var formatter;
    formatter = void 0;
    beforeEach(function() {
      formatter = new chat.MessageFormatter;
      formatter.setNick('ournick');
      return formatter.setCustomStyle(['purple']);
    });
    it("adds a period to the end of the message", function() {
      formatter.setMessage('No topic set');
      return expect(formatter.format()).toBe('No topic set.');
    });
    it("capitalises the first letter of the message", function() {
      formatter.setMessage('no topic set');
      return expect(formatter.format()).toBe('No topic set.');
    });
    it("surrounds the message with perentheses if it's from the user", function() {
      formatter.setContext('ournick');
      formatter.setMessage('no topic set');
      return expect(formatter.format()).toBe('(No topic set)');
    });
    it("returns an empty string when no message has been set", function() {
      return expect(formatter.format()).toBe('');
    });
    it("replaces '#from' with the user who sent the message", function() {
      formatter.setContext('othernick');
      formatter.setMessage('#from set the topic');
      return expect(formatter.format()).toBe('othernick set the topic.');
    });
    it("doesn't capitalise the first letter when it is a nick, even when the nick is 'you'", function() {
      formatter.setContext('you');
      formatter.setMessage('#from set the topic');
      return expect(formatter.format()).toBe('you set the topic.');
    });
    it("replaces '#to' with the user who sent the message", function() {
      formatter.setContext(void 0, 'bob');
      formatter.setMessage('#to got kicked');
      return expect(formatter.format()).toBe('bob got kicked.');
    });
    it("replaces '#content' with the user who sent the message", function() {
      formatter.setContext(void 0, void 0, 'this is the toipc');
      formatter.setMessage('topic changed to: #content');
      return expect(formatter.format()).toBe('Topic changed to: this is the toipc.');
    });
    it("can have the content field set directly", function() {
      formatter.setContent('this is the toipc');
      formatter.setMessage('topic changed to: #content');
      return expect(formatter.format()).toBe('Topic changed to: this is the toipc.');
    });
    it("replaces '#content' with the user who sent the message, even when the content field is '#to'", function() {
      formatter.setContext('othernick', 'bob', '#to');
      formatter.setMessage('topic changed to: #content');
      return expect(formatter.format()).toBe('Topic changed to: #to.');
    });
    it("replaces '#from', '#to' and '#content' when all are set", function() {
      formatter.setContext('othernick', 'bob', 'spamming /dance');
      formatter.setMessage('#from kicked #to for #content');
      return expect(formatter.format()).toBe('othernick kicked bob for spamming /dance.');
    });
    it("replaces '#from' with you, when the user sent the message", function() {
      formatter.setContext('ournick', 'bob', 'spamming /dance');
      formatter.setMessage('#from kicked #to for #content');
      return expect(formatter.format()).toBe('(You kicked bob for spamming /dance)');
    });
    it("replaces '#to' with you, when the message pertains to the user", function() {
      formatter.setContext('othernick', 'ournick', 'spamming /dance');
      formatter.setMessage('#from kicked #to for #content');
      return expect(formatter.format()).toBe('othernick kicked you for spamming /dance.');
    });
    it("initially only has styles from setCustomStyle()", function() {
      return expect(formatter.getStyle()).toBe('purple');
    });
    it("can have styles added", function() {
      formatter.addStyle('yellow');
      return expect(formatter.getStyle()).toBe('purple yellow');
    });
    it("setting a style removes the added styles but keeps custom styles", function() {
      formatter.addStyle('yellow');
      formatter.setStyle('blue');
      return expect(formatter.getStyle()).toBe('purple blue');
    });
    it("uses the 'self' style when the message is from the user", function() {
      formatter.setContext('ournick');
      return expect(formatter.getStyle()).toBe('purple self');
    });
    it("uses the 'self' style when the message pertains to the user", function() {
      formatter.setContext(void 0, 'ournick');
      return expect(formatter.getStyle()).toBe('purple self');
    });
    it("doesn't uses the 'self' style when the message is from or pertains to another user", function() {
      formatter.setContext('othernick', 'bob');
      return expect(formatter.getStyle()).toBe('purple');
    });
    it("can check if it has a certain style", function() {
      formatter.addStyle('black');
      expect(formatter.hasStyle('purple')).toBe(true);
      expect(formatter.hasStyle('black')).toBe(true);
      return expect(formatter.hasStyle('blue')).toBe(false);
    });
    it("can force the message to be from the user even when the from field doesn't match", function() {
      formatter.setContext('othernick', 'bob');
      formatter.setMessage('#from can be called #to');
      formatter.setFromUs(true);
      expect(formatter.format()).toBe('(You can be called bob)');
      return expect(formatter.getStyle()).toBe('purple self');
    });
    it("can force the message not to pertain to the user even when the to field matches", function() {
      formatter.setContext('ournick', 'ournick');
      formatter.setMessage('#from can be called #to');
      formatter.setToUs(false);
      expect(formatter.format()).toBe('(You can be called ournick)');
      return expect(formatter.getStyle()).toBe('purple self');
    });
    it("changes 'you is' to 'you are'", function() {
      formatter.setContext('ournick', 'ournick');
      formatter.setMessage('#from is cool; #to is the best');
      return expect(formatter.format()).toBe('(You are cool; you are the best)');
    });
    it("changes 'you has' to 'you have'", function() {
      formatter.setContext('ournick');
      formatter.setMessage('#from has a dog');
      return expect(formatter.format()).toBe('(You have a dog)');
    });
    it("can optionally not use pretty formatting", function() {
      formatter.setContext('ournick');
      formatter.setMessage('#from set the topic');
      formatter.setPrettyFormat(false);
      return expect(formatter.format()).toBe('you set the topic');
    });
    it("only adds punctuation if the message ends in a character or number", function() {
      formatter.setContent('This is the topic!!!!');
      formatter.setMessage('#content');
      return expect(formatter.format()).toBe('This is the topic!!!!');
    });
    it("escapes special characters and prints them correctly", function() {
      formatter.setContent('The $ must be escaped.');
      formatter.setMessage('#content');
      return expect(formatter.format()).toBe('The $ must be escaped.');
    });
    return it("uses clear() to reset state and format another message", function() {
      formatter.setContext('othernick', 'ournick', 'spamming /dance');
      formatter.setMessage('#from kicked #to for #content');
      formatter.addStyle('black');
      formatter.setPrettyFormat(false);
      formatter.clear();
      formatter.setContext('ournick');
      formatter.setMessage('#from set the topic');
      expect(formatter.format()).toBe('(You set the topic)');
      return expect(formatter.getStyle()).toBe('purple self');
    });
  });

}).call(this);
